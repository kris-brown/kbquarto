---
title: Functors, natural transformations, and databases
---

## Sets and functions as databases

- We can think of sets as 1-table databases and functions as 2-table databases.
- Any database takes a presentation of category, turns each vertex into a set and each arrow into a function.



## Functors


::: {.callout-tip icon=false collapse=false}
## A *functor* $\mathcal{C}\xrightarrow{F}\mathcal{D}$ between two [categories](2.qmd#cat).

<div id="functor"/></div>
-  For each object in $\mathcal{C}$ one specifies $F(c) \in Ob(\mathcal{D})$
- For each morphism $c_1\xrightarrow{f}c_2$ in $\mathcal{C}$, one specifies $F(c_1)\xrightarrow{F(f)}F(c_2)$ in $\mathcal{D}$
- Furthermore, two properties must be satisfied:
    1. Identity morphisms are mapped to identity morphisms
    2. Composition is preserved: $F(f;g)=F(f);F(g)$

:::


::: {.callout-caution icon=false collapse=false}
## Example functor between small categories
<div id="smallfunex"/></div>

-  Between the free square category and the commutative square category, there is no functor from the commutative square category to the free square category which keeps the corners in the same place.
- If we did this, we'd have $F(f;h)=F(g;i)$ (since these are the same morphism).
- The functor rules would allow us to break this up into $F(f);F(h)=F(g);F(i)$ and we don't have a choice for those mappings other than $f;h=g;i$, something that is not true in the free square category.


:::

::: {.callout-caution icon=false collapse=false}
## Preorder functor
<div id="preorderfunctor"/></div>

Functors between preorders are [monotone maps](../1/4.qmd#monotone-map). Morphisms in the source must map to sources in the target, so if $a \leq_P b$, then we require $F(a) \leq_Q F(b)$, which is tantamount to the monotone map constraint.

:::

::: {.callout-important icon=false collapse=false}
## Exercise 3-37
<div id="3-37"/></div>

How many functors are there from **2** to **3**?

::: {.callout-note collapse=true appearance="minimal"}
## Solution
We are only concerned about where the objects go, since the target category is a thin category (there is no choice about which morphism is mapped to). Thus the functors are: 11, 22, 33, 12, 23, 13

:::
:::
::: {.callout-important icon=false collapse=false}
## Exercise 3-39
<div id="3-39"/></div>

Say where each of the 10 morphisms in the free square category are mapped to by a functor to the commutative square category (where $Ob(F)$ maps each corner to the same corner).

::: {.callout-note collapse=true appearance="minimal"}
## Solution
The four identity morphisms and four length-1 paths are trivially mapped to the the corresponding morphisms.  Both length-2 paths in the free category are mapped to the same morphism, $f;h$.

:::
:::
::: {.callout-important icon=false collapse=false}
## Exercise 3-40
<div id="3-40"/></div>

Consider $\mathcal{C}=\boxed{\bullet \rightarrow \bullet}$ and $\mathcal{D}=\boxed{\bullet \rightrightarrows \bullet}$. Give two [functors](#functor) that act the same on objects but differently on morphisms.

::: {.callout-note collapse=true appearance="minimal"}
## Solution
Let the two [functors](#functor) map the left object to the left object and right object to the right object. The first [functor](#functor) maps the nontrivial morphism to the upper morphism in $\mathcal{D}$, whereas the second maps it to the lower morphism.

:::
:::

::: {.callout-important icon=false collapse=false}
## Exercise 3-43
<div id="3-43"/></div>

1. Given a category $\mathcal{C}$, show that there exists a [functor](#functor) $id_\mathcal{C}$ known as the identity [functor](#functor) on $\mathcal{C}$
2. Show that given $\mathcal{C}\xrightarrow{F}\mathcal{D}$ and $\mathcal{D}\xrightarrow{G}\mathcal{E}$ we can define a new [functor](#functor) $\mathcal{C}\xrightarrow{F;G}\mathcal{E}$ just by composing functions.
3. Show that there is a category, let's call it **Cat** where the objects are [categories](2.qmd#cat), morphisms are functors, and identities/composition are given as above.

::: {.callout-note collapse=true appearance="minimal"}
## Solution
1.  Mapping objects and morphisms to themselves satsifies the [functor](#functor) constraints of preserving identities and composition.
2. If $F,G$ both independently preserve identity arrows, then composition of these will also preserve this. Also $G(F(f;g))=G(F(f);F(g))=G(F(f));G(F(g))$ using the independent facts that $F,G$ each preserve composition.
3. Composition of identity functions do not change anything, so the identity [functor](#functor) (defined by identity function) will obey unitality. Because function composition is associative and functor composition is defined by this, we also satisfy that constraint.
:::
:::

## Database instances as **Set**-valued functors

Just like all sets are instances on the schema **1}, all functions are instances on the schema **2}.



::: {.callout-tip icon=false collapse=false}
## A $\mathcal{C}$ *instance*, where $\mathcal{C}$ is a schema, i.e. a finitely-presented category.

<div id="instance"/></div>
A [functor](#functor) $\mathcal{C} \xrightarrow{I} \mathbf{Set}$

:::


::: {.callout-caution icon=false collapse=false}
## Database instance example
<div id="db-inst-ex"/></div>


    \item Consider the following category: $\boxed{\overset{\bullet}{z}\circlearrowleft s\ \ \boxed{s;s = s}}$
    \item A [functor](#functor) from this category to **Set} is a set $Z$ and a involution function $Z \rightarrow Z$.

            \item $Z =$ natural numbers and a function sending everything to zero (zero is sent to zero)
            \item $Z =$ set of well-formed arithmetic expressions (e.g. $12+(2*4)$) and a function which evaluates to an integer (which itself is a well-formed expression). Evaluation on integers does nothing.
            \item A function which sends numbers greater than 2 to their smallest prime factor (this is a no-op on the prime factors themselves).



:::


::: {.callout-important icon=false collapse=false}
## Exercise 3-45
<div id="3-45"/></div>

For any [functor](#functor) $\mathbf{1} \xrightarrow{F} \mathbf{Set}$ one can extract a set, $F(1)$. Show that for any set $S$ there is a [functor](#functor) $\mathbf{1}\xrightarrow{F_S}\mathbf{Set}$ such that $F_S(1)=S$

::: {.callout-note collapse=true appearance="minimal"}
## Solution
Define $F_S$ to send the object of **1} to $S$ and preserve identity morphisms. There is no nontrivial composition to enforce, so this is a valid [functor](#functor).

:::
:::

## Natural transformations


::: {.callout-tip icon=false collapse=false}
## A *natural transformation} $F \overset{a}\Rightarrow G$ between two [functors](#functor) (going from $\mathcal{C}$ to $\mathcal{D}$).

<div id="nattrans"/></div>
    \item For each object $c \in \mathcal{C}$, one specifies a morphism $F(c)\xrightarrow{\alpha_c}G(c)$ in $\mathcal{D}$ called the *c-component of} $\alpha$
    \item These components must satisfy the *naturality condition}: for each morphism $c \xrightarrow{f} d$ in $\mathcal{C}$ we need $F(f);\alpha_d=\alpha_c;G(f)$
    \item AKA this diagram should commute: \begin{tikzcd} \pagecolor{white} F(c) \arrow[r, "\alpha_c"] \arrow[d, "F(f)"'] & G(c)\arrow[d, "G(f)"] \\F(d) \arrow[r, "\alpha_d"']& G(d)\end{tikzcd}
:::


::: {.callout-tip icon=false collapse=false}
## A *diagram} $\mathcal{D}$ in a [category](2.qmd#cat) $\mathcal{C}$

<div id="diagram"/></div>
    \item  A [functor](#functor) $\mathcal{J}\xrightarrow{D}\mathcal{C}$ from any [category](2.qmd#cat) $\mathcal{J}$ called the *indexing category} of the diagram $D$.
    \item We say $D$ *commutes} if $D(f)=D(f')$ for every parallel pair of morphisms $f,f'$ in $\mathcal{J}$

:::


::: {.callout-tip icon=false collapse=false}
## The *functor category} from categories $\mathcal{C}$ to $\mathcal{D}$

<div id="functorcat"/></div>
$\mathcal{D}^\mathcal{C}$ has all [functors](#functor) $\mathcal{C} \rightarrow \mathcal{D}$ as objects and [natural transformations](#nattrans) as morphisms.

:::

::: {.callout-caution icon=false collapse=false}
## A small natural transformation
<div id="nattransex"/></div>


- \begin{tikzcd} \pagecolor{white}                                                                            &                                                                                &                                    & v\arrow[blue,r, "d"'] \arrow[green,dd, "c"] & w \arrow[rd, "h"] \arrow[green,dd,"g"'] &   \\1 \arrow[r, "f"] \arrow[blue,rrru, dashed, bend left] \arrow[red,rrrd,dashed, bend right] & 2 \arrow[blue,rrru, "F"', dashed, bend left=49]\arrow[red,rrrd, "G", dashed, bend right=49] & u \arrow[ru, "a"]\arrow[rd, "b"'] &                                  &                                    & z \\                                                                                &                                                                                    &                                    & x\arrow[red,r, "e"]                  & y \arrow[ru,"k"']                 &  \end{tikzcd}
- The [natural transformation](#nattrans) requires us to choose morphisms in the righthand category for each object in the lefthand category
- The only choices to satisfy the naturality condition are $c$ and $g$.


:::


::: {.callout-caution icon=false collapse=false}
## Natural transformation to unit
<div id="terminal_nattrans"/></div>


-  Just like sets are in bijection with [functors](#functor) $\mathbf{1}\rightarrow\mathbf{Set}$, we can also associate [natural transformations](#nattrans) \begin{tikzcd} \pagecolor{white} 1 \arrow[r, bend left] \arrow[r, "\Downarrow", bend right] & Set\end{tikzcd} with functions.
- In the language of [functor categories](#funcat), this claim is to say $\mathbf{Set}^1$ is equivalent to **Set**.


:::


::: {.callout-caution icon=false collapse=false}
## Natural transformations between sequences
<div id="seq_nattrans"/></div>


-  Any non-decreasing sequence of naturals can be identified with a [functor](#functor) $\mathbb{N}\rightarrow \mathbb{N}$, considering the preorder of naturals as a category.
- A [natural transformation](#nattrans) between two of these [functors](#functor) would require a component $\alpha_n$ for each natural, which means a morphism from $F_n \rightarrow G_n$. This exists iff $F(n)\leq G(n)$.
- Thus we can put a preorder structure over the [monotone map](../1/4.qmd#monotone-map) of $\mathbb{N} \rightarrow \mathbb{N}$ (this is a thin [functor category](#funcat) $\mathbb{N}^\mathbb{N}$).


:::


::: {.callout-caution icon=false collapse=false}
## Natural isomorphism of preorders
<div id="?"/></div>

-  There exists a category **PrO** which has preorders as objects and [monotone maps](../1/4.qmd#monotone-map) as morphisms.
- There exists a category *Bool-Cat* in which the objects are **Bool**-categories and morphisms are **Bool**-functors.
- We call these categories equivalent because there exist [functors](#functor) $\mathbf{PrO}\overset{F}{\underset{G}{\rightleftarrows}}\mathbf{BoolCat}$ such that there exist [natural isomorphisms](#nattrans) $F;G \cong id_\mathbf{PrO}$ and $G;F \cong id_\mathbf{Bool-Cat}$
:::


::: {.callout-important icon=false collapse=false}
## Exercise 3-55
<div id="3-55"/></div>

Let's investigate why the [functor category](#funcat) is actually a [category](2.qmd#cat).

1. Figure out how to compose [natural transformations](#nattrans) $F \xrightarrow{\alpha} G \xrightarrow{\beta}H$.
2. Propose an identity [natural transformation](#nattrans) on any [functor](#functor) and check that it is unital.

::: {.callout-note collapse=true appearance="minimal"}
## Solution
1.  The individual [natural transformations](#nattrans) satsifying the naturality condition makes the left and right squares commute, meaning the whole diagram commutes: \begin{tikzcd} \pagecolor{white} F(c) \arrow[r, "\alpha_c"] \arrow[d, "F(f)"'] & G(c) \arrow[d,"G(f)"] \arrow[r, "\beta_{G(c)}"] & H(c) \arrow[d, "H(G(f))"] \\F(d) \arrow[r, "\alpha_d"']                   & G(d) \arrow[r,"\beta_{G(d)}"]                   & H(d)                     \end{tikzcd}
  - Thus the mapping from objects in $F$'s domain to morphisms in $H$'s codomain is given by $G;\beta$.

2. Mapping each object to its own identity morphism will satisfy the naturality condition (all four edges of the square become identity functions). This will enforce unitality.

:::
:::


::: {.callout-important icon=false collapse=false}
## Exercise 3-58
<div id="3-58"/></div>

Let $\mathcal{C}$ be an arbitrary [category](2.qmd#cat) and $\mathcal{P}$ be a preorder thought of as a category. Are the following true?

1. For any two [functors](#functor) $\mathcal{C}\xrightarrow{F,G}\mathcal{P}$, there is at most one [natural transformation](#nattrans) $F \rightarrow G$
2.  For any two functors $\mathcal{P}\xrightarrow{F,G}\mathcal{C}$, there is at most one [natural transformation](#nattrans) $F \rightarrow G$

::: {.callout-note collapse=true appearance="minimal"}
## Solution
1. This is true: there are no choices to be made for a [natural transformation](#nattrans), given that for each morphism $c\rightarrow d$ in $\mathcal{C}$ we have to pick $\alpha_c$ to be **the} morphism $F(c)\rightarrow G(c)$ and $\alpha_{d}$ to be **the} morphism $F(d)\rightarrow G(d)$.
2. Counterexample: \begin{tikzcd} \pagecolor{white} \underline{\mathcal{C}}&\underline{\mathcal{P}}\\2&b\\1 \arrow[u, "x", bend left] \arrow[u, "y"', bend right] &a \arrow[u, "f"]\end{tikzcd}

    - let $F$ send $f\mapsto x,a\mapsto1,b\mapsto 2$ and $G$ maps everything to $2$
    - The naturality condition for $f$ leaves us with two choices for $\alpha_a$
a
\begin{tikzcd} \pagecolor{white} F(a)=1 \arrow[d, "F(f)=x"'] \arrow[r, "{\alpha_a \in \{x,y\}}"] & G(a)=2 \arrow[d, "G(f)=id_2"] \\F(y)=2 \arrow[r, "{\alpha_b=id_2}"'] & G(b)=2 \end{tikzcd}
:::
:::


## The category of instances on a schema


::: {.callout-tip icon=false collapse=false}
## An *instance homomorphism* between two database instances, $\mathcal{C}\xrightarrow{I,J}\mathbf{Set}$

<div id="instmorphism"/></div>
-  A [natural transformation](#nattrans) between the two [functors](#functor) representing the instances.
- $\mathcal{C}\mathbf{Inst}:=\mathbf{Set}^\mathcal{C}$ denotes the [functor category](#funcat) where these instance homomorphisms are the morphisms.
:::


::: {.callout-caution icon=false collapse=false}
## **Grph** as a functor category
<div id="grph"/></div>


- The category of graphs as a [functor category](#funcat)
- Schema for graphs: $\mathbf{Gr}:=\boxed{\overset{Arr}\bullet \overset{src}{\underset{tar}{\rightrightarrows}}\overset{Vert}\bullet}$
- A graph [instance](#inst) has a set of points and a set of arrows, each of which has a source and target.
- There is a bijection between graphs and **Gr** instances
- The objects of **GrInst** are graphs, the morphisms are *graph homomorphisms* ([natural transformations](#nattrans) between two **Gr** to **Set** [functors](#functor))
    - Each graph homomorphism contains two components, which are morphisms in **Set**:
        1. $G(Vert) \xrightarrow{\alpha_{vert}} H(vert)$
        2.  $G(Arr) \xrightarrow{\alpha_{arr}} H(Arr)$
    - Naturality conditions
        1. \begin{tikzcd} \pagecolor{white} G(Arr) \arrow[r, "\alpha_{Arr}"] \arrow[d, "G(src)"'] & H(Arr) \arrow[d, "H(src)"] \\G(Vert) \arrow[r, "\alpha_{Vert}"']                   & H(Vert)                   \end{tikzcd}
        2. \begin{tikzcd} \pagecolor{white} G(Arr) \arrow[r, "\alpha_{Arr}"] \arrow[d, "G(tar)"'] & H(Arr) \arrow[d, "H(tar)"] \\G(Vert) \arrow[r, "\alpha_{Vert}"']                   & H(Vert)                   \end{tikzcd}



:::

::: {.callout-caution icon=false collapse=false}
## Arrow table
<div id="arrtable"/></div>


-  Consider the graphs $G:=\boxed{\overset{1}\bullet \xrightarrow{a} \overset{2}\bullet \xrightarrow{b}\overset{3}\bullet}$ and $H:=\boxed{\overset{4}\bullet \overset{d}{\underset{c}{\rightrightarrows}}\overset{5}\bullet\circlearrowleft e}$
- The arrow table of their database instances are below:
-
| G | src | tar|
|--|---|--|
| a | 1   | 2  |
| b | 2   | 3  |
-
| H | src | tar |
|--|--|--|
| c | 4   | 5   |
| d | 4   | 5   |
| e | 5   | 5   |
            \end{tabular}
          \end{minipage}



:::


::: {.callout-important icon=false collapse=false}
## Exercise 3-64
<div id="3-64"/></div>

Consider the graphs $G,H$ from [this example](#arrtable). We claim there is exactly one graph homomorphism such that $\alpha_{Arr}(a)=d$. What is the other value of $\alpha_{Arr}$, and what are the three values of $\alpha_{Vert}$?

::: {.callout-note collapse=true appearance="minimal"}
## Solution

-  We need $2 \mapsto 5$, so the source of $\alpha_{Arr}(b)$ must be $5$ (there is only one arrow to pick, $e$).
- $1 \mapsto 4,\ 2\mapsto 5,\ 3 \mapsto 5$
:::
:::
